@model CatalogPagingFilteringModel.PriceRangeFilterModel
@using Nop.Web.Models.Catalog;

@{
	var currentRangeItem = Model.CurrentRange == null ? Model.AllowedRange : Model.CurrentRange;
}

@helper FormatPriceRangeText(CatalogPagingFilteringModel.PriceRangeFilterItem filterItem)
{
	string rangeText = string.Format("<span class=\"PriceRange\">{0}</span> - <span class=\"PriceRange\">{1}</span>", filterItem.From, filterItem.To);

	<text>@Html.Raw(rangeText)</text>
}
@if (Model.Enabled)
{
	<div class="product-filter price-range-filter">
		<div class="filter-title">
			<strong>@T("Filtering.PriceRangeFilter")</strong>
		</div>
		<div class="filter-content">
			@if (Model.CurrentRange != null)
			{
			<div class="filtered-items">
				<span class="item">@FormatPriceRangeText(Model.CurrentRange)</span>
			</div>
			<div class="remove-filter">
				<a href="@Model.RemoveFilterUrl">@T("Filtering.PriceRangeFilter.Remove")</a>
			</div>
			}
		</div>

		<div class="price-range-container">
			<input id="priceRange"
				   type="text"
				   class="span2"
				   value=""
				   data-provide="bootstrapSlider"
				   data-slider-min="@Model.AllowedRange.FromDigit"
				   data-slider-max="@Model.AllowedRange.ToDigit"
				   data-slider-step="5"
				   data-slider-value="[@currentRangeItem.FromDigit, @currentRangeItem.ToDigit]"
				   data-slider-range="true"
				   data-slider-tooltip="hide" />
			<b id="startPrice">@currentRangeItem.From</b>
			<b id="endPrice" class="pull-right">@currentRangeItem.To</b>
		</div>
	</div>

	<input type="hidden" id="priceFormat" value="@Model.PriceFormat" />
}